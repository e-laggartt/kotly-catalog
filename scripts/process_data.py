import pandas as pd
import json
import re

def main():
    try:
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")
        
        # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ CSV —ç–∫—Å–ø–æ—Ä—Ç
        price_url = "https://docs.google.com/spreadsheets/d/19PRNpA6F_HMI6iHSCg2iJF52PnN203ckY1WnqY_t5fc/export?format=csv"
        stock_url = "https://docs.google.com/spreadsheets/d/1o0e3-E20mQsWToYVQpCHZgLcbizCafLRpoPdxr8Rqfw/export?format=csv"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–π—Å...")
        price_df = pd.read_csv(price_url)
        
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏...")
        stock_df = pd.read_csv(stock_url)
        
        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        price_df = price_df.rename(columns={
            '–ê—Ä—Ç–∏–∫—É–ª': '–ê—Ä—Ç–∏–∫—É–ª',
            '–ú–æ–¥–µ–ª—å': '–ú–æ–¥–µ–ª—å', 
            '–¶–µ–Ω–∞, —Ä—É–±': '–¶–µ–Ω–∞'
        })
        
        stock_df = stock_df.rename(columns={
            '–ê—Ä—Ç–∏–∫—É–ª': '–ê—Ä—Ç–∏–∫—É–ª',
            '–í –Ω–∞–ª–∏—á–∏–∏': '–í_–Ω–∞–ª–∏—á–∏–∏'
        })
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        price_df = price_df.dropna(subset=['–ê—Ä—Ç–∏–∫—É–ª'])
        price_df['–ê—Ä—Ç–∏–∫—É–ª'] = price_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
        
        stock_df = stock_df.dropna(subset=['–ê—Ä—Ç–∏–∫—É–ª'])
        stock_df['–ê—Ä—Ç–∏–∫—É–ª'] = stock_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ)
        def parse_price(price):
            try:
                if pd.isna(price):
                    return 0.0
                price_str = str(price).replace(' ', '').replace(',', '.')
                # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏
                price_str = re.sub(r'[^\d\.]', '', price_str)
                return float(price_str)
            except:
                return 0.0
        
        price_df['–¶–µ–Ω–∞'] = price_df['–¶–µ–Ω–∞'].apply(parse_price)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        def parse_quantity(qty):
            try:
                if pd.isna(qty):
                    return 0
                qty_str = str(qty).replace(' ', '').replace(',', '.')
                qty_val = float(qty_str)
                return max(0, int(qty_val))  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ -> 0
            except:
                return 0
        
        stock_df['–í_–Ω–∞–ª–∏—á–∏–∏'] = stock_df['–í_–Ω–∞–ª–∏—á–∏–∏'].apply(parse_quantity)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        merged_df = pd.merge(price_df, stock_df, on='–ê—Ä—Ç–∏–∫—É–ª', how='left')
        merged_df['–í_–Ω–∞–ª–∏—á–∏–∏'] = merged_df['–í_–Ω–∞–ª–∏—á–∏–∏'].fillna(0).astype(int)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        def extract_info(model):
            model_str = str(model).upper()
            
            # –ú–æ—â–Ω–æ—Å—Ç—å (–∏—â–µ–º —á–∏—Å–ª–∞)
            power_match = re.search(r'(\d+)\s*(–∫–í—Ç|KW|C|H|–°|–•)', model_str)
            power = power_match.group(1) if power_match else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –ö–æ–Ω—Ç—É—Ä—ã
            contours = "–î–≤—É—Ö–∫–æ–Ω—Ç—É—Ä–Ω—ã–π" if ' C' in model_str or '–° ' in model_str else "–û–¥–Ω–æ–∫–æ–Ω—Ç—É—Ä–Ω—ã–π"
            
            # Wi-Fi
            wifi = "–î–∞" if any(x in model_str for x in ['WI-FI', 'WIFI', '–í–ê–ô-–§–ê–ô', 'WI FI']) else "–ù–µ—Ç"
            
            return power, contours, wifi
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        merged_df[['–ú–æ—â–Ω–æ—Å—Ç—å', '–ö–æ–Ω—Ç—É—Ä—ã', 'WiFi']] = merged_df['–ú–æ–¥–µ–ª—å'].apply(
            lambda x: pd.Series(extract_info(x))
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        merged_df['–°—Ç–∞—Ç—É—Å'] = merged_df['–í_–Ω–∞–ª–∏—á–∏–∏'].apply(lambda x: '–í –Ω–∞–ª–∏—á–∏–∏' if x > 0 else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        result = merged_df.to_dict('records')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open('data.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(result)} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"üìä –í –Ω–∞–ª–∏—á–∏–∏: {sum(1 for x in result if x['–í_–Ω–∞–ª–∏—á–∏–∏'] > 0)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        print("\n–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞):")
        for i, item in enumerate(result[:3]):
            print(f"{i+1}. {item['–ê—Ä—Ç–∏–∫—É–ª']} - {item['–ú–æ–¥–µ–ª—å'][:30]}... - {item['–¶–µ–Ω–∞']} —Ä—É–±. - {item['–í_–Ω–∞–ª–∏—á–∏–∏']} —à—Ç.")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —á—Ç–æ–±—ã —Å–∞–π—Ç –Ω–µ —Å–ª–æ–º–∞–ª—Å—è
        with open('data.json', 'w', encoding='utf-8') as f:
            json.dump([], f, ensure_ascii=False, indent=2)

if __name__ == "__main__":
    main()
